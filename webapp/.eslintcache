[{"D:\\React\\Finder\\githubfinder\\src\\index.js":"1","D:\\React\\Finder\\githubfinder\\src\\App.js":"2","D:\\React\\Finder\\githubfinder\\src\\reportWebVitals.js":"3","D:\\React\\Finder\\githubfinder\\src\\styles\\theme.js":"4","D:\\React\\Finder\\githubfinder\\src\\styles\\mix.js":"5","D:\\React\\Finder\\githubfinder\\src\\components\\user.js":"6","D:\\React\\Finder\\githubfinder\\src\\components\\User.js":"7","D:\\React\\Finder\\githubfinder\\src\\components\\Userinfo.js":"8","D:\\React\\Finder\\githubfinder\\src\\styles\\media.js":"9","D:\\React\\Finder\\githubfinder\\src\\styles\\Section.js":"10","D:\\React\\Finder\\githubfinder\\src\\components\\Main.js":"11","D:\\React\\Finder\\githubfinder\\src\\components\\Repo.js":"12","D:\\React\\Finder\\githubfinder\\src\\components\\Charts.js":"13","D:\\React\\Finder\\githubfinder\\src\\components\\buildChart.js":"14","D:\\React\\Finder\\githubfinder\\src\\styles\\langColors.js":"15","D:\\React\\Finder\\githubfinder\\src\\styles\\combined.js":"16","D:\\React\\Finder\\githubfinder\\src\\styles\\ChartStyles.js":"17","D:\\React\\Finder\\githubfinder\\src\\styles\\RepoStyles.js":"18","D:\\React\\Finder\\githubfinder\\src\\styles\\DropdownStyles.js":"19","D:\\React\\Finder\\githubfinder\\src\\styles\\Userinfocss.js":"20"},{"size":588,"mtime":1611826046152,"results":"21","hashOfConfig":"22"},{"size":453,"mtime":1611857075297,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":632,"mtime":1611731812224,"results":"25","hashOfConfig":"22"},{"size":1037,"mtime":1611733246036,"results":"26","hashOfConfig":"22"},{"size":2103,"mtime":1611832342170,"results":"27","hashOfConfig":"22"},{"size":2760,"mtime":1612032560775,"results":"28","hashOfConfig":"22"},{"size":2452,"mtime":1612006679494,"results":"29","hashOfConfig":"22"},{"size":615,"mtime":1611836899777,"results":"30","hashOfConfig":"22"},{"size":1110,"mtime":1611837375755,"results":"31","hashOfConfig":"22"},{"size":2876,"mtime":1611923331001,"results":"32","hashOfConfig":"22"},{"size":4148,"mtime":1611990443972,"results":"33","hashOfConfig":"22"},{"size":5921,"mtime":1612032601930,"results":"34","hashOfConfig":"22"},{"size":1346,"mtime":1611987804740,"results":"35","hashOfConfig":"22"},{"size":4913,"mtime":1611987854447,"results":"36","hashOfConfig":"22"},{"size":458,"mtime":1611987907891,"results":"37","hashOfConfig":"22"},{"size":888,"mtime":1611990483812,"results":"38","hashOfConfig":"22"},{"size":2593,"mtime":1611990543644,"results":"39","hashOfConfig":"22"},{"size":2174,"mtime":1611990501398,"results":"40","hashOfConfig":"22"},{"size":2081,"mtime":1611990564767,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"caclx3",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\React\\Finder\\githubfinder\\src\\index.js",[],["87","88"],"D:\\React\\Finder\\githubfinder\\src\\App.js",[],"D:\\React\\Finder\\githubfinder\\src\\reportWebVitals.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\theme.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\mix.js",[],"D:\\React\\Finder\\githubfinder\\src\\components\\user.js",["89","90","91","92","93","94","95","96","97"],"D:\\React\\Finder\\githubfinder\\src\\components\\User.js",["98","99","100"],"import React ,{useState,useEffect} from 'react'\r\nimport GhPolyglot from 'gh-polyglot';\r\nimport Helmet from 'react-helmet';\r\nimport Userinfo from './Userinfo';\r\nimport Repos from './Repo';\r\nimport Charts from './Charts';\r\nconst User = (props) => {\r\n  const username=props.match.params.name;\r\n  const [userData, setUserData] = useState(null);\r\n  const [langData, setLangData] = useState(null);\r\n  const [repoData, setRepoData] = useState(null);\r\n  const [error, setError] = useState({ active: false, type: 200 });\r\n  const [rateLimit, setRateLimit] = useState(null);\r\n  const getUserData = () => {\r\n    fetch(`https://api.github.com/users/${username}`)\r\n      .then(response => {\r\n        if (response.status === 404) {\r\n          return setError({ active: true, type: 404 });\r\n        }\r\n        if (response.status === 403) {\r\n          return setError({ active: true, type: 403 });\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(json => setUserData(json))\r\n      .catch(error => {\r\n        setError({ active: true, type: 400 });\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n\r\n  const getLangData = () => {\r\n    const me = new GhPolyglot(`${username}`);\r\n    me.userStats((err, stats) => {\r\n      if (err) {\r\n        console.error('Error:', err);\r\n        setError({ active: true, type: 400 });\r\n      }\r\n      setLangData(stats);\r\n    });\r\n  };\r\n\r\n  const getRepoData = () => {\r\n    fetch(`https://api.github.com/users/${username}/repos?per_page=100`)\r\n      .then(response => {\r\n        if (response.status === 404) {\r\n          return setError({ active: true, type: 404 });\r\n        }\r\n        if (response.status === 403) {\r\n          return setError({ active: true, type: 403 });\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(json => setRepoData(json))\r\n      .catch(error => {\r\n        setError({ active: true, type: 200 });\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.github.com/rate_limit`)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        setRateLimit(json.resources.core);\r\n        if (json.resources.core.remaining < 1) {\r\n          setError({ active: true, type: 403 });\r\n        }\r\n      });\r\n\r\n    getUserData();\r\n    getLangData();\r\n    getRepoData();\r\n    //getchartdata();\r\n  },[]);\r\n  return (\r\n       <main>\r\n         <Helmet><title>GithubFinder-{username}</title></Helmet>\r\n         {userData && <Userinfo userData={userData} />}\r\n          {repoData && <Repos repoData={repoData} />}\r\n          {langData && repoData && <Charts langData={langData} repoData={repoData} />}\r\n          {/* <Chart  data={topReposChart} type=\"pie\"  height={350} /> */}\r\n       </main>\r\n    )\r\n};\r\n\r\nexport default User;","D:\\React\\Finder\\githubfinder\\src\\components\\Userinfo.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\media.js",[],["101","102"],"D:\\React\\Finder\\githubfinder\\src\\styles\\Section.js",[],"D:\\React\\Finder\\githubfinder\\src\\components\\Main.js",[],"D:\\React\\Finder\\githubfinder\\src\\components\\Repo.js",["103","104"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GoTriangleDown ,GoRepo,GoRepoForked} from \"react-icons/go\";\r\nimport {RiStarSLine} from 'react-icons/ri';\r\nimport FlipMove from 'react-flip-move';\r\nimport ReposStyles from '../styles/RepoStyles';\r\nimport DropdownStyles from '../styles/DropdownStyles';\r\nimport  Section  from '../styles/Section';\r\n\r\n\r\nconst Repos = ({ repoData }) => {\r\n  const [topRepos, setTopRepos] = useState([]);\r\n  const [sortType, setSortType] = useState('stars');\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const getTopRepos = type => {\r\n    const LIMIT = 8;\r\n    const map = {\r\n      stars: 'stargazers_count',\r\n      forks: 'forks_count',\r\n      size: 'size',\r\n    };\r\n    const sortProperty = map[type];\r\n    const sorted = repoData\r\n      .filter(repo => !repo.fork)\r\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\r\n      .slice(0, LIMIT);\r\n\r\n    setTopRepos(sorted);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (repoData.length) {\r\n      getTopRepos();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => getTopRepos(sortType), [sortType]);\r\n\r\n  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\r\n\r\n  const changeRepoSort = sortType => {\r\n    setSortType(sortType);\r\n    toggleDropdown();\r\n  };\r\n\r\n  const sortTypes = ['stars', 'forks', 'size'];\r\n\r\n  return (\r\n    <Section dark>\r\n      <ReposStyles>\r\n        <header>\r\n          <h2>Repos</h2>\r\n          <div className=\"dropdown-wrapper\">\r\n            <span className=\"label\">by</span>\r\n            <DropdownStyles active={dropdownOpen}>\r\n              <button className=\"dropdown__button\" onClick={() => toggleDropdown()}>\r\n                <label>{sortType}</label>\r\n                <GoTriangleDown size=\"20px\"></GoTriangleDown>\r\n              </button>\r\n              <ul className=\"dropdown__list\">\r\n                {sortTypes.map((type, i) => (\r\n                  <li className=\"dropdown__list-item\" key={i}>\r\n                    <button onClick={() => changeRepoSort(type)}>{type}</button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </DropdownStyles>\r\n          </div>\r\n        </header>\r\n\r\n        <div className=\"repo-list\">\r\n          {topRepos.length > 0 ? (\r\n            <FlipMove typeName=\"ul\">\r\n              {topRepos.map(repo => (\r\n                <li key={repo.id}>\r\n                  <a\r\n                    href={repo.html_url}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"repo\">\r\n                    <div className=\"repo__top\">\r\n                      <div className=\"repo__name\">\r\n                        <GoRepo></GoRepo>\r\n                        <h3>{repo.name}</h3>\r\n                      </div>\r\n                      <p>{repo.description}</p>\r\n                    </div>\r\n                    <div className=\"repo__stats\">\r\n                      <div className=\"repo__stats--left\">\r\n                        <span>\r\n                          <div\r\n                            className=\"language\"\r\n                            style={{ backgroundColor: \"white\" }}\r\n                          />\r\n                          {repo.language}\r\n                        </span>\r\n                        <span>\r\n                          <RiStarSLine />\r\n                          {repo.stargazers_count.toLocaleString()}\r\n                        </span>\r\n                        <span>\r\n                          <GoRepoForked></GoRepoForked>\r\n                          {repo.forks.toLocaleString()}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"repo__stats--right\">\r\n                        <span>{repo.size.toLocaleString()} KB</span>\r\n                      </div>\r\n                    </div>\r\n                  </a>\r\n                </li>\r\n              ))}\r\n            </FlipMove>\r\n          ) : (\r\n            <p>No available repositories!</p>\r\n          )}\r\n        </div>\r\n      </ReposStyles>\r\n    </Section>\r\n  );\r\n};\r\n\r\nRepos.propTypes = {\r\n  repoData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Repos;","D:\\React\\Finder\\githubfinder\\src\\components\\Charts.js",["105"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport  buildChart from './buildChart';\r\nimport langColors from '../styles/langColors';\r\nimport {backgroundColor, borderColor} from '../styles/combined';\r\nimport ChartsStyles from '../styles/ChartStyles';\r\nimport  Section  from '../styles/Section';\r\n\r\nconst Charts = ({ langData, repoData }) => {\r\n  const [langChartData, setLangChartData] = useState(null);\r\n  const initLangChart = () => {\r\n    const ctx = document.getElementById('langChart');\r\n    const labels = langData.map(lang => lang.label);\r\n    const data = langData.map(lang => lang.value);\r\n\r\n    setLangChartData(data);\r\n\r\n    if (data.length > 0) {\r\n      const backgroundColor = langData.map(\r\n        ({ color }) => `#${color.length > 4 ? color.slice(1) : color.slice(1).repeat(2)}B3`,\r\n      );\r\n      const borderColor = langData.map(lang => `${lang.color}`);\r\n      const chartType = 'pie';\r\n      const axes = false;\r\n      const legend = true;\r\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\r\n      buildChart(config);\r\n    }\r\n  };\r\n\r\n  const [starChartData, setStarChartData] = useState(null);\r\n  const initStarChart = () => {\r\n    const ctx = document.getElementById('starChart');\r\n    const LIMIT = 5;\r\n    const sortProperty = 'stargazers_count';\r\n    const mostStarredRepos = repoData\r\n      .filter(repo => !repo.fork)\r\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\r\n      .slice(0, LIMIT);\r\n    const labels = mostStarredRepos.map(repo => repo.name);\r\n    const data = mostStarredRepos.map(repo => repo[sortProperty]);\r\n\r\n    setStarChartData(data);\r\n\r\n    if (data.length > 0) {\r\n      const chartType = 'bar';\r\n      const axes = true;\r\n      const legend = false;\r\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\r\n      buildChart(config);\r\n    }\r\n  };\r\n\r\n  const [thirdChartData, setThirdChartData] = useState(null);\r\n  const initThirdChart = () => {\r\n    const ctx = document.getElementById('thirdChart');\r\n    const filteredRepos = repoData.filter(repo => !repo.fork && repo.stargazers_count > 0);\r\n    const uniqueLangs = new Set(filteredRepos.map(repo => repo.language));\r\n    const labels = Array.from(uniqueLangs.values()).filter(l => l);\r\n    const data = labels.map(lang => {\r\n      const repos = filteredRepos.filter(repo => repo.language === lang);\r\n      const starsArr = repos.map(r => r.stargazers_count);\r\n      const starSum = starsArr.reduce((a, b) => a + b, 0);\r\n      return starSum;\r\n    });\r\n\r\n    setThirdChartData(data);\r\n\r\n    if (data.length > 0) {\r\n      const chartType = 'doughnut';\r\n      const axes = false;\r\n      const legend = true;\r\n      const borderColor = labels.map(label => langColors[label]);\r\n      const backgroundColor = borderColor.map(color => `${color}B3`);\r\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\r\n      buildChart(config);\r\n    }\r\n  };\r\n  const [forkchartdata, setforkChartData] = useState(null);\r\n  const initforkChart = () => {\r\n    const ctx = document.getElementById('forkChart');\r\n    const LIMIT = 5;\r\n    const sortProperty = 'forks_count';\r\n    const mostforkedRepos = repoData\r\n      .filter(repo => !repo.fork)\r\n      .sort((a, b) => b[sortProperty] - a[sortProperty])\r\n      .slice(0, LIMIT);\r\n    const labels = mostforkedRepos.map(repo => repo.name);\r\n    const data = mostforkedRepos.map(repo => repo[sortProperty]);\r\n\r\n    setforkChartData(data);\r\n\r\n    if (data.length > 0) {\r\n      const chartType = 'bar';\r\n      const axes = true;\r\n      const legend = false;\r\n      const config = { ctx, chartType, labels, data, backgroundColor, borderColor, axes, legend };\r\n      buildChart(config);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (langData.length && repoData.length) {\r\n      initLangChart();\r\n      initStarChart();\r\n      initThirdChart();\r\n      initforkChart();\r\n    }\r\n  }, []);\r\n\r\n  const chartSize = 300;\r\n  const langChartError = !(langChartData && langChartData.length > 0);\r\n  const starChartError = !(starChartData && starChartData.length > 0);\r\n  const thirdChartError = !(thirdChartData && thirdChartData.length > 0);\r\n  const forkChartError = !(forkchartdata && forkchartdata.length > 0);\r\n  return (\r\n    <Section>\r\n      <ChartsStyles>\r\n        <div className=\"chart\">\r\n          <header>\r\n            <h2>Top Languages</h2>\r\n          </header>\r\n\r\n          <div className=\"chart-container\">\r\n            {langChartError && <p>Nothing to see here!</p>}\r\n            <canvas id=\"langChart\" width={chartSize} height={chartSize} />\r\n          </div>\r\n        </div>\r\n        &nbsp;\r\n        &nbsp;\r\n        &nbsp;\r\n        <div className=\"chart\">\r\n          <header>\r\n            <h2>Most Starred</h2>\r\n          </header>\r\n          <div className=\"chart-container\">\r\n            {starChartError && <p>Nothing to see here!</p>}\r\n            <canvas id=\"starChart\" width={chartSize} height={chartSize} />\r\n          </div>\r\n        </div>\r\n        <div className=\"chart\">\r\n          <header>\r\n            <h2>Most Forked</h2>\r\n          </header>\r\n          <div className=\"chart-container\">\r\n            {forkChartError && <p>Nothing to see here!</p>}\r\n            <canvas id=\"forkChart\" width={chartSize} height={chartSize} />\r\n          </div>\r\n        </div>\r\n        &nbsp;\r\n        <div className=\"chart\">\r\n          <header>\r\n            <h2>Stars per Language</h2>\r\n          </header>\r\n          <div className=\"chart-container\">\r\n            {thirdChartError && <p>Nothing to see here!</p>}\r\n            <canvas id=\"thirdChart\" width={chartSize} height={chartSize} />\r\n          </div>\r\n        </div>\r\n      </ChartsStyles>\r\n    </Section>\r\n  );\r\n};\r\n\r\nCharts.propTypes = {\r\n  langData: PropTypes.array.isRequired,\r\n  repoData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Charts;","D:\\React\\Finder\\githubfinder\\src\\components\\buildChart.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\langColors.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\combined.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\ChartStyles.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\RepoStyles.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\DropdownStyles.js",[],"D:\\React\\Finder\\githubfinder\\src\\styles\\Userinfocss.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":4,"column":9,"nodeType":"112","messageId":"113","endLine":4,"endColumn":17},{"ruleId":"110","severity":1,"message":"114","line":5,"column":10,"nodeType":"112","messageId":"113","endLine":5,"endColumn":18},{"ruleId":"110","severity":1,"message":"115","line":5,"column":20,"nodeType":"112","messageId":"113","endLine":5,"endColumn":31},{"ruleId":"110","severity":1,"message":"116","line":6,"column":10,"nodeType":"112","messageId":"113","endLine":6,"endColumn":18},{"ruleId":"110","severity":1,"message":"117","line":6,"column":20,"nodeType":"112","messageId":"113","endLine":6,"endColumn":31},{"ruleId":"110","severity":1,"message":"118","line":7,"column":10,"nodeType":"112","messageId":"113","endLine":7,"endColumn":18},{"ruleId":"110","severity":1,"message":"119","line":7,"column":20,"nodeType":"112","messageId":"113","endLine":7,"endColumn":31},{"ruleId":"110","severity":1,"message":"120","line":8,"column":10,"nodeType":"112","messageId":"113","endLine":8,"endColumn":15},{"ruleId":"110","severity":1,"message":"121","line":8,"column":17,"nodeType":"112","messageId":"113","endLine":8,"endColumn":25},{"ruleId":"110","severity":1,"message":"120","line":12,"column":10,"nodeType":"112","messageId":"113","endLine":12,"endColumn":15},{"ruleId":"110","severity":1,"message":"122","line":13,"column":10,"nodeType":"112","messageId":"113","endLine":13,"endColumn":19},{"ruleId":"123","severity":1,"message":"124","line":75,"column":5,"nodeType":"125","endLine":75,"endColumn":7,"suggestions":"126"},{"ruleId":"106","replacedBy":"127"},{"ruleId":"108","replacedBy":"128"},{"ruleId":"123","severity":1,"message":"129","line":36,"column":6,"nodeType":"125","endLine":36,"endColumn":8,"suggestions":"130"},{"ruleId":"123","severity":1,"message":"131","line":38,"column":42,"nodeType":"125","endLine":38,"endColumn":52,"suggestions":"132"},{"ruleId":"123","severity":1,"message":"133","line":108,"column":6,"nodeType":"125","endLine":108,"endColumn":8,"suggestions":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'langData' is assigned a value but never used.","'setLangData' is assigned a value but never used.","'repoData' is assigned a value but never used.","'setRepoData' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'rateLimit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getLangData', 'getRepoData', and 'getUserData'. Either include them or remove the dependency array.","ArrayExpression",["137"],["135"],["136"],"React Hook useEffect has missing dependencies: 'getTopRepos' and 'repoData.length'. Either include them or remove the dependency array.",["138"],"React Hook useEffect has a missing dependency: 'getTopRepos'. Either include it or remove the dependency array.",["139"],"React Hook useEffect has missing dependencies: 'initLangChart', 'initStarChart', 'initThirdChart', 'initforkChart', 'langData.length', and 'repoData.length'. Either include them or remove the dependency array.",["140"],"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [getLangData, getRepoData, getUserData]",{"range":"149","text":"150"},"Update the dependencies array to be: [getTopRepos, repoData.length]",{"range":"151","text":"152"},"Update the dependencies array to be: [getTopRepos, sortType]",{"range":"153","text":"154"},"Update the dependencies array to be: [initLangChart, initStarChart, initThirdChart, initforkChart, langData.length, repoData.length]",{"range":"155","text":"156"},[2336,2338],"[getLangData, getRepoData, getUserData]",[1068,1070],"[getTopRepos, repoData.length]",[1117,1127],"[getTopRepos, sortType]",[3990,3992],"[initLangChart, initStarChart, initThirdChart, initforkChart, langData.length, repoData.length]"]